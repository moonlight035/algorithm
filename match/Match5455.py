import math
from typing import List


class Solution:
    def minInteger(self, num: str, k: int) -> str:
        dp = self.RMQ(list(num))

        def getMin(left: int, right: int):
            max = math.floor(math.log2(right - left + 1))
            return dp[left][max] if num[dp[left][max]] <= num[dp[right + 1 - (1 << max)][max]] else dp[right + 1 - (1 << max)][max]

        l = len(num)
        #已经被使用的index
        jump = []
        ans = ''
        i = 0
        while k > 0 and i < l:
            last = k
            start = 0
            index = -1
            for j in range(len(jump)+1):
                end = min(last,len(num)-1)
                if j < len(jump) and jump[j]-1 < end:
                    end = jump[j]-1
                    last = last + 1
                if start <= end:
                    now = getMin(start,end)
                    if index == -1 or num[now] < num[index]:
                        index = now
                if last == end:
                    break
                start = end + 2
            k -= index-self.find(jump,index)
            i = i+1
            ans = ans + num[index]
            self.insert(jump,index)

        r = list(num)
        for i in jump:
            r[i] = ''
        return ans + ''.join(r)

    def find(self, nums: List[int], index: int) -> int:
        i = 0
        res = 0
        while i < len(nums) and nums[i] < index:
            res = res+1
            i = i+1
        return res

    def insert(self, nums: List[int], index: int) -> None:
        i = 0
        while i < len(nums):
            if nums[i] >= index:
                break
            i = i+1
        nums.insert(i,index)



    def RMQ(self, nums: List[int]) -> List[List[int]]:
        l = len(nums)
        max = math.floor(math.log2(l))
        dp = [[0] * (max + 1) for _ in range(l)]

        for i in range(l):
            dp[i][0] = i

        for i in range(1, max + 1):
            for j in range(l + 1 - (1<<i)):
                dp[j][i] = dp[j][i-1] if nums[dp[j][i-1]] <= nums[dp[j + (1<<(i-1))][i - 1]] else dp[j + (1<<(i-1))][i - 1]
        return dp

s =Solution()
print(s.minInteger("41475244928212312950791434866182729628613739601277507519359709120859989055425409434043638873317909728136694342335526645657096055834369843781975518388692178627235155834909485382877306004293745202106392052480901953602496434549243064078173479707757998904080896827293198309958537018584236634577113105204750456951959547281393138776294496157480461141991326862997230861061334733084407884586851515420249668594222607548639338847499929031840365692828661218899755923380064589549645972002888971124926430916154646813476078180997571755878256674476082746157075774779157760492208892717989690182586027914707654742434984950534714988256139449476045719423955348598386769574906354317876493309913594868246694586233215175388227638531438698028656886468417881324316964590912647732356207443473452993826481917818230370738362623389767996718347535865793065772940702149544496415737952418231679698186532590643879167575627130430358633542489899209497407917515840824077074891650972620122305307706436895769871781237924641754155918778432393031044453639963921844374156811244525370162979081093315177490560704784050211152780302896874655807840018378411730350129537045688344092375347500608380081358050731521985016738110780485996212583342352740797420167669798471530176287354867900743446491686696132260733461421591970546779155989719498470336391120849414988120074053444925864903710080970081578491876005975254049947566666775109436618010845364836606615815882746593644709924549686530715393876718169013815518599604045676766162357053504465069085573781440674598864407850124423269998125696927422256562696791690489927032826141537053796091178943574623721254750605453179797402471758603019183729424468478798916157868563490814420836193918061188067873967282534194992321159702755344476874514819069026923732273559933051117909073390247615501099512993700623599791258932073028408444497091204586300614826969729785303324657756481820329119421392707308298103824341460206194853933697259287538496298700013884412546216036857165040512053121114383822973672348477766993414435277016898761125452574797311713566316607630732078179315125749911201857297030988977776409413183339257100845932679478165810660893522324653254246448476465577069590607216378245613904327625922218720242185778888889212767471352187513666483676146672467915085877389172276001680917069812314570692796698110989290168863194067449804910511535253996223109189073511560869654706129261726604887775706825381332394571649412383493935123575896190381844336813837681941268594394387286138632163632942539924846119332753827632946776865380833315696380349555965586790101790655553638648817719845303973259290317706120917356838037798173529448005697313467181182684158904874099223686288418717646421681422717777911437232651918460942140808214229643542058121052525983223171302551358298840499001092638844953342164237810499519738131921045450057229347018933728787743753765147312904945732076251799213336499104047570702332151134841411596477739247605278879671856437366682043611646506597880333897272948783226300124603122836842197937756207183128600122966183037158664328402383045369415857367214346865683054364015249562697734672865218244856767011575207263918204040374302753210811726975235306263638052323179814166023981793674039882977366062532143668064654590610411467438051382278658780882056509583403886041757649187095667661543085253788975513451799144622864590891811116694622032082115597616390008287944712582041405919335634754965063579141457267467949451073109636884372379147992909355977150058121725581850007886263154458204218048730436442929028195688950897597172690039980014656669460247817524369146048915016699666785020325579830680623432774193939980628733582080740485313561488119175053709995150620278203855470864394896520751693882679538121605964551290984498978364521325718669152071381381268363949270584134738386451168010104391842955605080420719889730294579379802440316916022191335657638905762769788586301444351989201493715541063768450533095528996402942585084424296043985554691624481640918876707257172633537512082961206791395895593187287409936301251925509938093456862191391381293357648543828316464853191739939551127574560070922024388859309668854"
,30094502))